(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[264],{7990:function(e,t,n){"use strict";n.d(t,{Z:function(){return a}});var r=n(9519),i=n(1350),s=n(9267),o=n(2322);function a(e){var t=e.heading,n=e.children;return(0,o.jsx)("div",{className:"block accordion-block",children:(0,o.jsx)(i.Z,{multiple:!1,toggleOnLoad:!1,toggleAllOption:!1,children:(0,o.jsxs)(s.Z,{children:[(0,o.jsxs)(s.Z.Header,{children:[(0,o.jsx)("div",{className:"accordion-chevron",children:(0,o.jsx)(r.r,{})}),(0,o.jsx)("div",{className:"accordion-header-text",children:t})]}),(0,o.jsx)(s.Z.Content,{children:n})]})})})}},4422:function(e,t,n){"use strict";n(2784);var r=n(2322);t.Z=function(e){var t=e.children,n=e.type,i=void 0===n?"default":n;return(0,r.jsx)("div",{className:"callout ".concat(i),children:t})}},5963:function(e,t,n){"use strict";n.d(t,{Z:function(){return l}});var r=n(4730),i=n(2322),s=["src","region","lang"];function o(e,t){var n="undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"===typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))||t&&e&&"number"===typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,o=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){c=!0,s=e},f:function(){try{o||null==n.return||n.return()}finally{if(c)throw s}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function c(e,t){if(!t)return e;var n,r=new RegExp("//\\s*#region\\s+".concat(t)),i=new RegExp("//\\s*#endregion\\s+".concat(t)),s=[],a=!1,c=o(e.split(/\r?\n/));try{for(c.s();!(n=c.n()).done;){var l=n.value;if(a){if(l.match(i))break;s.push(l)}else l.match(r)&&(a=!0)}}catch(d){c.e(d)}finally{c.f()}return a||console.warn("No region matching ".concat(t," found in CodeSnippet src")),s.join("\n")}function l(e){var t=e.src,n=e.region,o=e.lang,a=(0,r.Z)(e,s);return o&&(a.className="language-".concat(o)),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:a.className,children:c(t,n)})})}},5265:function(e,t,n){"use strict";n.d(t,{E:function(){return l},m:function(){return d}});var r=n(9499),i=n(2784),s=n(6277),o=n(2322);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e){var t=e.hidden,n=e.className,r=e.children;return(0,o.jsx)("div",{role:"tabpanel",hidden:t,className:(0,s.Z)(n),children:r})}function d(e){var t=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&"undefined"!==typeof e.props.value)return e;throw new Error('Unexpected child in Tabs element. All children of <Tabs> should be a <TabItem> with a unique "value" prop')}))||[],n=t.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}}));if(new Set(n.map((function(e){return e.value}))).size!==n.length)throw new Error("All <TabItem> children of a <Tabs> component must have a unique 'value' prop");var r=n.length>0?n[0].value:null,a=(0,i.useState)(r),l=a[0],d=a[1],h=[],u=function(e){var t=e.currentTarget,r=h.indexOf(t);if(!(r<0)){var i=n[r].value;i!==l&&d(i)}};return(0,o.jsxs)("div",{className:"tabs-container",children:[(0,o.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs","list-none","m-0",e.className),children:n.map((function(e){var t=e.value,n=e.label,r=e.attributes,i=l===t;return(0,o.jsx)("li",c(c({role:"tab",tabIndex:i?0:-1,"aria-selected":i,ref:function(e){return h.push(e)},onFocus:u,onKeyDown:u,onClick:u},r),{},{className:(0,s.Z)("tabs__item",i?"tabs__item--active":null,r?r.className:null),children:n||t}),t)}))}),(0,o.jsx)("div",{className:"tabs__content",children:t.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==l})}))})]})}},72:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return g}});var r=n(9499),i=n(7841),s=n(9083),o=n(1151),a=n(5265),c=n(4422),l=n(5963),d=n(7990),h="import { Web3Storage } from 'web3.storage'\nimport { CarReader, CarWriter } from '@ipld/car'\nimport { encode } from 'multiformats/block'\nimport * as json from '@ipld/dag-json'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\nasync function storeDagJSON (jsonObject) {\n  // encode the json object into an IPLD block\n  const block = await encode({ value: jsonObject, codec: json, hasher: sha256 })\n\n  // create a new CarWriter, with the encoded block as the root\n  const { writer, out } = CarWriter.create([block.cid])\n\n  // add the block to the CAR and close it\n  writer.put(block)\n  writer.close()\n\n  // create a new CarReader we can hand to Web3.Storage.putCar\n  const reader = await CarReader.fromIterable(out)\n\n  // upload to Web3.Storage using putCar\n  console.log('uploading car.')\n  const client = new Web3Storage({ token: process.env.WEB3STORAGE_TOKEN })\n  const cid = await client.putCar(reader, {\n    name: 'putCar using dag-json',\n\n    // include the dag-json codec in the decoders field\n    decoders: [json]\n  })\n  console.log('Stored dag-json data! CID:', cid)\n}\n\nstoreDagJSON({\n  hello: 'world'\n})\n",u=n(2322);function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function j(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function f(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},(0,o.ah)(),e.components),n=t.wrapper;return n?(0,u.jsx)(n,j(j({},e),{},{children:(0,u.jsx)(r,{})})):r();function r(){var t=Object.assign({h1:"h1",p:"p",a:"a",em:"em",h5:"h5",ul:"ul",li:"li",code:"code",h2:"h2",pre:"pre",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,o.ah)(),e.components);return(0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(t.h1,{children:"JavaScript client library reference"}),"\n",(0,u.jsxs)(t.p,{children:["To use the JavaScript client library for Web3.Storage, you must first ",(0,u.jsx)(t.a,{href:"../how-tos/generate-api-token.md",children:"obtain a free API token"}),"."]}),"\n",(0,u.jsxs)(t.p,{children:["The client library automatically packs your uploads into a content addressible archive (CAR) for uploading to the Web3.Storage service, which ",(0,u.jsx)(t.a,{href:"#store-files",children:"stores"})," data as blocks prefixed with the ",(0,u.jsxs)(t.a,{href:"../concepts/content-addressing.md#cids-location-independent-globally-unique-keys",children:[(0,u.jsx)(t.em,{children:"content identifier"})," (CID)"]})," derived from a cryptographic hash of the data. You can then use a file's CID to ",(0,u.jsx)(t.a,{href:"#retrieve-files",children:"retrieve"})," it."]}),"\n",(0,u.jsxs)(t.p,{children:["This page covers the core functionality of the JavaScript client. See the ",(0,u.jsx)(t.a,{href:"./js-utilities.md",children:"JavaScript utility libraries page"})," for some additional packages that may be useful when working with Web3.Storage."]}),"\n",(0,u.jsxs)(c.Z,{type:"warning",children:[(0,u.jsx)(t.h5,{children:"Minimum requirements"}),(0,u.jsxs)(t.p,{children:["While we recommend that you install the latest ",(0,u.jsx)(t.em,{children:"stable"})," version of the following software, you must have ",(0,u.jsx)(t.em,{children:"at least"}),":"]}),(0,u.jsxs)(t.ul,{children:["\n",(0,u.jsxs)(t.li,{children:[(0,u.jsx)(t.a,{href:"https://www.npmjs.com/",children:"NPM"})," ",(0,u.jsx)(t.code,{children:"7.0.0"})]}),"\n",(0,u.jsxs)(t.li,{children:[(0,u.jsx)(t.a,{href:"https://nodejs.org/en/",children:"Node.js"})," ",(0,u.jsx)(t.code,{children:"14.0.0"})]}),"\n",(0,u.jsxs)(t.li,{children:[(0,u.jsx)(t.a,{href:"https://webpack.js.org/",children:"Webpack"})," ",(0,u.jsx)(t.code,{children:"5.0.0"})]}),"\n"]})]}),"\n",(0,u.jsx)(t.h2,{children:"Constructor"}),"\n",(0,u.jsx)(t.p,{children:"The constructor for Web3.Storage is simple; all you need is your API token."}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-javascript",children:"import { Web3Storage } from 'web3.storage';\n\n// Construct with token and endpoint\nconst client = new Web3Storage({ token: apiToken });\n"})}),"\n",(0,u.jsx)(t.h2,{children:"Store files"}),"\n",(0,u.jsxs)(t.p,{children:["Store files using the ",(0,u.jsx)(t.code,{children:"put()"})," method."]}),"\n",(0,u.jsx)(t.h3,{children:"Usage"}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-javascript",children:"<clientObject>.put(file[], { options })\n"})}),"\n",(0,u.jsx)(t.h3,{children:"Examples"}),"\n",(0,u.jsxs)(a.m,{groupId:"js-lib",children:[(0,u.jsxs)(a.E,{value:"browser",label:"Browser",children:[(0,u.jsx)(t.p,{children:"In the browser, using a file chooser to prompt the user for files to store:"}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-javascript",children:"const fileInput = document.querySelector('input[type=\"file\"]');\n\n// Pack files into a CAR and send to web3.storage\nconst rootCid = await client.put(fileInput.files, {\n  name: 'cat pics',\n  maxRetries: 3,\n});\n"})})]}),(0,u.jsxs)(a.E,{value:"node",label:"Node.js",children:[(0,u.jsxs)(t.p,{children:["In Node.js, using the ",(0,u.jsx)(t.code,{children:"getFilesFromPath"})," helper to load ",(0,u.jsx)(t.code,{children:"File"})," objects from a local path:"]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-javascript",children:"import { getFilesFromPath } from 'web3.storage';\n\nconst files = await getFilesFromPath('./files');\nconst rootCid = await client.put(files);\n"})})]})]}),"\n",(0,u.jsx)(t.h3,{children:"Return value"}),"\n",(0,u.jsx)(t.p,{children:"The method returns a string containing the CID of the uploaded CAR."}),"\n",(0,u.jsx)(t.h3,{children:"Parameters"}),"\n",(0,u.jsx)(t.p,{children:"Method parameters are supplied in positional order."}),"\n",(0,u.jsxs)(t.table,{children:[(0,u.jsx)(t.thead,{children:(0,u.jsxs)(t.tr,{children:[(0,u.jsx)(t.th,{children:"Number"}),(0,u.jsx)(t.th,{children:"Type"}),(0,u.jsx)(t.th,{children:"Description"})]})}),(0,u.jsxs)(t.tbody,{children:[(0,u.jsxs)(t.tr,{children:[(0,u.jsx)(t.td,{children:"1"}),(0,u.jsx)(t.td,{children:(0,u.jsx)(t.code,{children:"file[]"})}),(0,u.jsxs)(t.td,{children:["An iterable collection of ",(0,u.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/File",children:"Files"})," to be packed into a CAR and uploaded."]})]}),(0,u.jsxs)(t.tr,{children:[(0,u.jsx)(t.td,{children:"2"}),(0,u.jsx)(t.td,{children:(0,u.jsx)(t.code,{children:"{options}"})}),(0,u.jsxs)(t.td,{children:[(0,u.jsx)(t.em,{children:"Optional."})," An object whose properties define certain Web3.Storage options and metadata about the files being uploaded. See below for more details."]})]})]})]}),"\n",(0,u.jsxs)(t.p,{children:["An ",(0,u.jsx)(t.code,{children:"{options}"})," object has the following properties that can be used as parameters when calling ",(0,u.jsx)(t.code,{children:"put()"}),":"]}),"\n",(0,u.jsxs)(d.Z,{heading:"name",children:[(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"String."})," The ",(0,u.jsx)(t.code,{children:"name"})," parameter lets you attach an arbitrary name to the uploaded content archive, which you can use to identify and organize your uploads. The name is not stored alongside the data on IPFS, but it is viewable within the file listing on the Web3.Storage site."]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-js",children:"const cid = await client.put(files, { name: 'cat pics' });\n"})})]}),"\n",(0,u.jsxs)(d.Z,{heading:"maxRetries",children:[(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"Number."})," You can specify how many times ",(0,u.jsx)(t.code,{children:"put"})," should attempt to retry in case of failure by passing in a ",(0,u.jsx)(t.code,{children:"maxRetries"})," option:"]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-js",children:"const cid = await client.put(files, { maxRetries: 3 });\n"})})]}),"\n",(0,u.jsxs)(d.Z,{heading:"wrapWithDirectory",children:[(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"Boolean."})," The ",(0,u.jsx)(t.code,{children:"wrapWithDirectory"})," parameter controls whether the files will be wrapped in an IPFS directory when added to Web3.Storage. With the default value of ",(0,u.jsx)(t.code,{children:"true"}),", all files provided to the ",(0,u.jsx)(t.code,{children:"put"})," method will be wrapped in an IPFS directory listing."]}),(0,u.jsxs)(t.p,{children:["For example, when adding a file called ",(0,u.jsx)(t.code,{children:"hello.txt"})," using the default behavior, the root CID returned by the ",(0,u.jsx)(t.code,{children:"put"})," method identifies a directory containing a file named ",(0,u.jsx)(t.code,{children:"hello.txt"}),", rather than the ",(0,u.jsx)(t.code,{children:"hello.txt"})," file itself, which is accessible at ",(0,u.jsx)(t.code,{children:"<rootCID>/hello.txt"}),"."]}),(0,u.jsxs)(t.p,{children:["If you are adding a directory full of files using the ",(0,u.jsx)(t.code,{children:"put"})," method, you may want to override the default behavior to avoid an extra level of nesting in your IPFS path. For example, if you have a ",(0,u.jsx)(t.code,{children:"files"})," directory like this:"]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{children:"files\n\u251c\u2500\u2500 hello.txt\n\u2514\u2500\u2500 stuff\n    \u2514\u2500\u2500 things.md\n"})}),(0,u.jsxs)(t.p,{children:["Using the default behavior, the ",(0,u.jsx)(t.code,{children:"put"})," method would return a CID for a directory containing a ",(0,u.jsx)(t.code,{children:"files"})," subdirectory, like this:"]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{children:"bafybeigw6rik2dlxlfx354ofycpjzljon7zagjofcb35csrsdujf3zbfca/\n\u2514\u2500\u2500 files\n    \u251c\u2500\u2500 hello.txt\n    \u2514\u2500\u2500 stuff\n        \u2514\u2500\u2500 things.md\n"})}),(0,u.jsx)(t.p,{children:"However, if you do this instead:"}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-javascript",children:"const cid = await client.put(files, { wrapWithDirectory: false });\n"})}),(0,u.jsxs)(t.p,{children:["The ",(0,u.jsx)(t.em,{children:"contents"})," of the ",(0,u.jsx)(t.code,{children:"files"})," directory will be at the top level, instead of the ",(0,u.jsx)(t.code,{children:"files"})," directory itself:"]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{children:"bafybeiebez7epbidb7f6fcurnd5ukpokrpq5wkrsuakynukpxxo4y4ewvi/\n\u251c\u2500\u2500 hello.txt\n\u2514\u2500\u2500 stuff\n    \u2514\u2500\u2500 things.md\n"})})]}),"\n",(0,u.jsxs)(d.Z,{heading:"onRootCidReady",children:[(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"Function."})," Because the data is formatted for IPFS and Filecoin on the client, the root CID for the data is generated before the data is uploaded to Web3.Storage. If you want to display the CID to the user before the upload is complete, pass in an ",(0,u.jsx)(t.code,{children:"onRootCidReady"})," function that accepts a CID string:"]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-js",children:"const onRootCidReady = rootCid => console.log('root cid:', rootCid);\nconst cid = await client.put(files, { onRootCidReady });\n"})})]}),"\n",(0,u.jsxs)(d.Z,{heading:"onStoredChunk",children:[(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"Function."})," You can also display progress updates by passing in an ",(0,u.jsx)(t.code,{children:"onStoredChunk"})," callback. This is called after each chunk of data is uploaded, with the size of the chunk in bytes passed in as a parameter:"]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-js",children:"const onStoredChunk = chunkSize => console.log(`stored chunk of ${chunkSize} bytes`);\nconst cid = await client.put(files, { onStoredChunk });\n"})})]}),"\n",(0,u.jsx)(t.h2,{children:"Retrieve files"}),"\n",(0,u.jsxs)(t.p,{children:["Retrieve files using the ",(0,u.jsx)(t.code,{children:"get()"})," method. You will need the CID you obtained at upload time that references the CAR for your uploaded files."]}),"\n",(0,u.jsx)(t.h3,{children:"Usage"}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-javascript",children:"<clientObject>.get(<CID>)\n"})}),"\n",(0,u.jsx)(t.h3,{children:"Example"}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-javascript",children:"const res = await client.get(rootCid); // Web3Response\nconst files = await res.files(); // Web3File[]\nfor (const file of files) {\n  console.log(`${file.cid} ${file.name} ${file.size}`);\n}\n"})}),"\n",(0,u.jsx)(t.h3,{children:"Return value"}),"\n",(0,u.jsxs)(t.p,{children:["Returns ",(0,u.jsx)(t.code,{children:"undefined"})," if there are no matches for the given CID."]}),"\n",(0,u.jsxs)(t.p,{children:["If found, the method returns a ",(0,u.jsx)(t.code,{children:"Web3Response"})," object, which extends the ",(0,u.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Response",children:"Fetch API response object"})," to add two iterator methods unique to the Web3.Storage client library: ",(0,u.jsx)(t.code,{children:"files()"})," and ",(0,u.jsx)(t.code,{children:"unixFsIterator()"}),"."]}),"\n",(0,u.jsxs)(a.m,{groupId:"return",children:[(0,u.jsxs)(a.E,{value:"file",label:"Using File objects",children:[(0,u.jsxs)(t.p,{children:["Calling the ",(0,u.jsx)(t.code,{children:"files()"})," method returns your requested files as an ",(0,u.jsx)(t.code,{children:"Array<Web3File>"})," object, which is an iterable collection of ",(0,u.jsx)(t.code,{children:"Web3File"})," objects. Each object represents a file that was uploaded in the CAR with the supplied CID."]}),(0,u.jsxs)(t.p,{children:["The ",(0,u.jsx)(t.code,{children:"Web3File"})," type extends ",(0,u.jsxs)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/File",children:["the generic JavaScript ",(0,u.jsx)(t.code,{children:"File"})," type"]}),", adding a ",(0,u.jsx)(t.code,{children:"string"})," property for the CID of the given file named ",(0,u.jsx)(t.code,{children:"cid"}),", as shown in the example below. This is different from the CID of the CAR that contains the file, which you specified when calling ",(0,u.jsx)(t.code,{children:"get()"}),"."]})]}),(0,u.jsxs)(a.E,{value:"file-unix",label:"Using UnixFS objects",children:[(0,u.jsxs)(t.p,{children:["In addition to the ",(0,u.jsx)(t.code,{children:"files()"})," method, you can also use the ",(0,u.jsx)(t.code,{children:"unixFsIterator()"})," method. This returns your requested files as a ",(0,u.jsx)(t.code,{children:"AsyncIterable<UnixFS>"})," object, which is an iterable collection of ",(0,u.jsx)(t.a,{href:"https://github.com/ipfs/js-ipfs-unixfs/blob/master/packages/ipfs-unixfs/README.md",children:(0,u.jsx)(t.code,{children:"UnixFS"})})," objects. Each object represents a file that was uploaded in the CAR with the supplied CID."]}),(0,u.jsxs)(t.p,{children:["Using ",(0,u.jsx)(t.code,{children:"unixFS"})," is helpful in cases where you expect large responses or responses containing many files, since it does not buffer all files in memory before returning. Instead, the returned async iterator ",(0,u.jsx)(t.code,{children:"yield"}),"s an object for each entry."]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-js",children:"const res = await client.get(cid);\nfor await (const entry of res.unixFsIterator()) {\n  console.log(`got unixfs of type ${entry.type}. cid: ${entry.cid} path: ${entry.path}`);\n  // entry.content() returns another async iterator for the chunked file contents\n  for await (const chunk of entry.content()) {\n    console.log(`got a chunk of ${chunk.size} bytes of data`);\n  }\n}\n"})}),(0,u.jsxs)(t.p,{children:["Note that not all ",(0,u.jsx)(t.code,{children:"UnixFS"})," entries returned by the iterator represent files. If ",(0,u.jsx)(t.code,{children:"entry.type == 'directory'"}),", the entry represents a directory and contains no data itself; it just links to other entries."]}),(0,u.jsxs)(t.p,{children:["For more details on ",(0,u.jsx)(t.code,{children:"UnixFS"})," objects, see ",(0,u.jsxs)(t.a,{href:"https://github.com/ipfs/js-ipfs-unixfs/blob/master/packages/ipfs-unixfs/README.md",children:["the README file in the ",(0,u.jsx)(t.code,{children:"UnixFS"})," GitHub repository"]}),"."]})]})]}),"\n",(0,u.jsx)(t.h3,{children:"Parameters"}),"\n",(0,u.jsx)(t.p,{children:"Parameters are supplied in positional order."}),"\n",(0,u.jsxs)(t.table,{children:[(0,u.jsx)(t.thead,{children:(0,u.jsxs)(t.tr,{children:[(0,u.jsx)(t.th,{children:"Number"}),(0,u.jsx)(t.th,{children:"Type"}),(0,u.jsx)(t.th,{children:"Description"})]})}),(0,u.jsx)(t.tbody,{children:(0,u.jsxs)(t.tr,{children:[(0,u.jsx)(t.td,{children:"1"}),(0,u.jsx)(t.td,{children:(0,u.jsx)(t.code,{children:"string"})}),(0,u.jsx)(t.td,{children:"A string containing the CID of the CAR to be retrieved."})]})})]}),"\n",(0,u.jsx)(t.h2,{children:"Check status"}),"\n",(0,u.jsxs)(t.p,{children:["Retrieve metadata about your file by using the ",(0,u.jsx)(t.code,{children:"status()"})," method and supplying the CID of the file you are interested in. This metadata includes the creation date and file size, as well as details about how the network is storing your data. Using this information, you can identify peers on the ",(0,u.jsx)(t.a,{href:"https://ipfs.io",children:"IPFS (InterPlanetary File System)"})," network that are pinning the data, and ",(0,u.jsx)(t.a,{href:"https://filecoin.io",children:"Filecoin"})," storage providers that have accepted deals to store the data."]}),"\n",(0,u.jsx)(t.h3,{children:"Usage"}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-javascript",children:"<clientObject>.status(<CID>)\n"})}),"\n",(0,u.jsx)(t.h3,{children:"Examples"}),"\n",(0,u.jsxs)(a.m,{groupId:"examples",children:[(0,u.jsxs)(a.E,{value:"call",label:"Call",children:[(0,u.jsxs)(t.p,{children:["Here's an example of a call to the ",(0,u.jsx)(t.code,{children:"status()"})," method:"]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-javascript",children:"const info = await client.status(rootCid);\nconsole.log(`${info.cid} ${info.dagSize} ${info.created}`);\n"})})]}),(0,u.jsxs)(a.E,{value:"response",label:"Response",children:[(0,u.jsxs)(t.p,{children:["Here's an example response from the ",(0,u.jsx)(t.code,{children:"status()"})," method:"]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-json",children:'{\n  "ok": true,\n  "value": {\n    "cid": "bafkreidivzimqfqtoqxkrpge6bjyhlvxqs3rhe73owtmdulaxr5do5in7u",\n    "size": 132614,\n    "created": "2021-03-12T17:03:07.787Z",\n    "type": "image/jpeg",\n    "scope": "default",\n    "pin": {\n      "cid": "bafkreidivzimqfqtoqxkrpge6bjyhlvxqs3rhe73owtmdulaxr5do5in7u",\n      "name": "pin name",\n      "meta": {},\n      "status": "queued",\n      "created": "2021-03-12T17:03:07.787Z",\n      "size": 132614\n    },\n    "files": [\n      {\n        "name": "logo.jpg",\n        "type": "image/jpeg"\n      }\n    ],\n    "deals": [\n      {\n        "batchRootCid": "bafkreidivzimqfqtoqxkrpge6bjyhlvxqs3rhe73owtmdulaxr5do5in7u",\n        "lastChange": "2021-03-18T11:46:50.000Z",\n        "miner": "f05678",\n        "network": "nerpanet",\n        "pieceCid": "bafkreidivzimqfqtoqxkrpge6bjyhlvxqs3rhe73owtmdulaxr5do5in7u",\n        "status": "queued",\n        "statusText": "miner rejected my data",\n        "chainDealID": 138,\n        "dealActivation": "2021-03-18T11:46:50.000Z",\n        "dealExpiration": "2021-03-18T11:46:50.000Z"\n      }\n    ]\n  }\n}\n'})})]})]}),"\n",(0,u.jsx)(t.h3,{children:"Parameters"}),"\n",(0,u.jsx)(t.p,{children:"Parameters are supplied in positional order."}),"\n",(0,u.jsxs)(t.table,{children:[(0,u.jsx)(t.thead,{children:(0,u.jsxs)(t.tr,{children:[(0,u.jsx)(t.th,{children:"Number"}),(0,u.jsx)(t.th,{children:"Type"}),(0,u.jsx)(t.th,{children:"Description"})]})}),(0,u.jsx)(t.tbody,{children:(0,u.jsxs)(t.tr,{children:[(0,u.jsx)(t.td,{children:"1"}),(0,u.jsx)(t.td,{children:(0,u.jsx)(t.code,{children:"string"})}),(0,u.jsx)(t.td,{children:"A string containing the CID of the CAR."})]})})]}),"\n",(0,u.jsx)(t.h3,{children:"Return value"}),"\n",(0,u.jsxs)(t.p,{children:["Returns ",(0,u.jsx)(t.code,{children:"undefined"})," if there are no matches for the given CID."]}),"\n",(0,u.jsxs)(t.p,{children:["If found, the ",(0,u.jsx)(t.code,{children:"status()"})," method returns a ",(0,u.jsx)(t.code,{children:"{Status}"})," object that contains the metadata for your object's storage deal on the Web3.Storage network, with the following properties:"]}),"\n",(0,u.jsx)(d.Z,{heading:"cid",children:(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"String."})," The ",(0,u.jsx)(t.code,{children:"cid"})," property is the content identifier of the data for which you are retrieving status information."]})}),"\n",(0,u.jsx)(d.Z,{heading:"dagSize",children:(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"Number."})," The ",(0,u.jsx)(t.code,{children:"dagSize"})," property is the total size, in bytes, of the ",(0,u.jsx)(t.a,{href:"https://docs.ipfs.io/concepts/merkle-dag/",children:"Merkle Directed Acyclic Graph (DAG)"})," containing the queried CID."]})}),"\n",(0,u.jsxs)(d.Z,{heading:"created",children:[(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"String."})," The ",(0,u.jsx)(t.code,{children:"created"})," property gives the creation date in ",(0,u.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/ISO_8601",children:"ISO 8601"})," format."]}),(0,u.jsxs)(c.Z,{type:"info",children:[(0,u.jsx)(t.h5,{children:"Tip"}),(0,u.jsxs)(t.p,{children:["The ",(0,u.jsx)(t.code,{children:"created"})," date returned by a call to ",(0,u.jsx)(t.code,{children:"status()"})," is the date and time that the CID was first seen on the network. The date given by a call to ",(0,u.jsx)(t.code,{children:"list()"})," is the date and time of a particular upload via a call to ",(0,u.jsx)(t.code,{children:"put()"}),". These can differ if multiple users upload the same file(s)."]})]})]}),"\n",(0,u.jsxs)(d.Z,{heading:"pins",children:[(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"Array."})," The ",(0,u.jsx)(t.code,{children:"pins"})," property is an array of ",(0,u.jsx)(t.code,{children:"Pin"})," objects. Each ",(0,u.jsx)(t.code,{children:"Pin"})," object represents a specific ",(0,u.jsx)(t.a,{href:"https://docs.libp2p.io/concepts/peer-id/",children:"peer in the IPFS network,"})," with the following structure:"]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-json",children:"Pin {\n  peerId: string, // Libp2p peer ID of the node pinning the data.\n  peerName: string, // Human readable name for the peer pinning the data.\n  region: string, // Approximate geographical region of the node pinning the data.\n  status: string, // Can be one of: 'Pinned' | 'Pinning' | 'PinQueued'\n  updated: string // Updated date in ISO 8601 format.\n}\n"})})]}),"\n",(0,u.jsxs)(d.Z,{heading:"deals",children:[(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"Array."})," The ",(0,u.jsx)(t.code,{children:"deals"})," property is an array of ",(0,u.jsx)(t.code,{children:"Deal"})," objects. Each ",(0,u.jsx)(t.code,{children:"Deal"})," object represents a specific ",(0,u.jsx)(t.a,{href:"https://docs.filecoin.io/about-filecoin/how-filecoin-works/#deals",children:"storage deal on the Filecoin network,"})," for a specific ",(0,u.jsx)(t.a,{href:"https://spec.filecoin.io/systems/filecoin_files/piece/",children:"Piece"})," of data, with the following structure:"]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-json",children:"Deal {\n  dealId: number, // On-chain ID of the deal.\n  storageProvider: string, // Address of the storage provider storing this data.\n  status: string, // Can be one of: 'Queued' | 'Published' | 'Active'\n  pieceCid: string, // Piece CID of the data in the deal.\n  dataCid: string, // CID of the data aggregated in this deal.\n  dataModelSelector: string, // Selector for extracting data from the aggregated root.\n  activation: string, // Date when the deal will become active, in ISO 8601 format.\n  created: string, // Creation date, in ISO 8601 format.\n  updated: string // Updated date, in ISO 8601 format.\n}\n"})})]}),"\n",(0,u.jsx)(t.h2,{children:"List uploads"}),"\n",(0,u.jsxs)(t.p,{children:["List previous uploads with the ",(0,u.jsx)(t.code,{children:"list()"})," method."]}),"\n",(0,u.jsx)(t.h3,{children:"Usage"}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-javascript",children:"<clientObject>.list({before, maxResults})\n"})}),"\n",(0,u.jsx)(t.h3,{children:"Example"}),"\n",(0,u.jsxs)(t.p,{children:["The following example stores return values from a call to ",(0,u.jsx)(t.code,{children:"list()"})," into a JavaScript array:"]}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-javascript",children:"// Return the names of 10 uploads\nconst uploadNames = [];\nfor await (const item of client.list({ maxResults: 10 })) {\n  uploadNames.push(item.name);\n}\n"})}),"\n",(0,u.jsx)(t.h3,{children:"Parameters"}),"\n",(0,u.jsxs)(t.p,{children:["The ",(0,u.jsx)(t.code,{children:"list()"})," method accepts an ",(0,u.jsx)(t.code,{children:"{options}"})," object with the following properties:"]}),"\n",(0,u.jsx)(d.Z,{heading:"before",children:(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"String"}),". Specifies a date, in ISO 8601 format. Ensures that the call to ",(0,u.jsx)(t.code,{children:"list()"})," will not return any results newer than the given date."]})}),"\n",(0,u.jsx)(d.Z,{heading:"maxResults",children:(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"Number"}),". Specifies the maximum number of uploads to return when calling ",(0,u.jsx)(t.code,{children:"list()"}),"."]})}),"\n",(0,u.jsx)(t.h3,{children:"Return value"}),"\n",(0,u.jsxs)(t.p,{children:["The return value for ",(0,u.jsx)(t.code,{children:"list()"})," is an ",(0,u.jsx)(t.code,{children:"AsyncIterable"})," object, containing objects whose data structure is the same as the return value for ",(0,u.jsx)(t.code,{children:"status()"})," but with one extra propery: a string field called ",(0,u.jsx)(t.code,{children:"name"})," that corresponds to the value given passed to the ",(0,u.jsx)(t.code,{children:"name"})," parameter in the original call to ",(0,u.jsx)(t.code,{children:"put()"}),". This means that iterating through results from your call to ",(0,u.jsx)(t.code,{children:"list()"})," yields objects with the below example structure."]}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-json",children:'{\n  "name": "cat pics",\n  "cid": "bafkreifzjut3te2nhyekklss27nh3k72ysco7y32koao5eei66wof36n5e",\n  "created": "2021-07-14T19:27:14.934572Z",\n  "dagSize": 101,\n  "pins": [\n    {\n      "peerId": "12D3KooWR1Js",\n      "peerName": "peerName",\n      "region": "peerRegion",\n      "status": "Pinned"\n    }\n  ],\n  "deals": [\n    {\n      "dealId": 12345,\n      "storageProvider": "f099",\n      "status": "Active",\n      "pieceCid": "bafkreifzjut3te2nhyekklss27nh3k72ysco7y32koao5eei66wof36n5e",\n      "dataCid": "bafkreifzjut3te2nhyekklss27nh3k72ysco7y32koao5eei66wof36n5e",\n      "dataModelSelector": "Links/0/Links",\n      "activation": "2021-07-14T19:27:14.934572Z",\n      "created": "2021-07-14T19:27:14.934572Z",\n      "updated": "2021-07-14T19:27:14.934572Z"\n    }\n  ]\n}\n'})}),"\n",(0,u.jsxs)(c.Z,{type:"info",children:[(0,u.jsx)(t.h5,{children:"Tip"}),(0,u.jsxs)(t.p,{children:["The ",(0,u.jsx)(t.code,{children:"created"})," date on these objects are the date and time that the user uploaded via ",(0,u.jsx)(t.code,{children:"put()"}),". The ",(0,u.jsx)(t.code,{children:"created"})," date given by a call to ",(0,u.jsx)(t.code,{children:"status()"})," is the date and time that the CID was first seen on the network. These can differ if multiple users uploaded the same file(s)."]})]}),"\n",(0,u.jsx)(t.h2,{children:"Store CAR files"}),"\n",(0,u.jsxs)(t.p,{children:["Store ",(0,u.jsx)(t.a,{href:"https://github.com/ipld/js-car",children:"a CAR file"})," using the ",(0,u.jsx)(t.code,{children:"putCar()"})," method."]}),"\n",(0,u.jsx)(t.h3,{children:"Usage"}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-javascript",children:"<clientObject>.putCar(car, { options })\n"})}),"\n",(0,u.jsx)(t.h3,{children:"Examples"}),"\n",(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-javascript",children:"import fs from 'fs';\nimport { Readable } from 'stream';\nimport { CarReader, CarWriter } from '@ipld/car';\nimport * as raw from 'multiformats/codecs/raw';\nimport { CID } from 'multiformats/cid';\nimport { sha256 } from 'multiformats/hashes/sha2';\n\nasync function getCar() {\n  const bytes = new TextEncoder().encode('random meaningless bytes');\n  const hash = await sha256.digest(raw.encode(bytes));\n  const cid = CID.create(1, raw.code, hash);\n  // create the writer and set the header with a single root\n  const { writer, out } = await CarWriter.create([cid]);\n  Readable.from(out).pipe(fs.createWriteStream('example.car'));\n  // store a new block, creates a new file entry in the CAR archive\n  await writer.put({ cid, bytes });\n  await writer.close();\n  const inStream = fs.createReadStream('example.car');\n  // read and parse the entire stream in one go, this will cache the contents of\n  // the car in memory so is not suitable for large files.\n  const reader = await CarReader.fromIterable(inStream);\n  return reader;\n}\n\nconst car = await getCar();\nconst cid = await client.putCar(car);\n"})}),"\n",(0,u.jsx)(t.h3,{children:"Return value"}),"\n",(0,u.jsx)(t.p,{children:"The method returns a string containing the CID of the uploaded CAR."}),"\n",(0,u.jsx)(t.h3,{children:"Parameters"}),"\n",(0,u.jsx)(t.p,{children:"Method parameters are supplied in positional order."}),"\n",(0,u.jsxs)(t.table,{children:[(0,u.jsx)(t.thead,{children:(0,u.jsxs)(t.tr,{children:[(0,u.jsx)(t.th,{children:"Number"}),(0,u.jsx)(t.th,{children:"Type"}),(0,u.jsx)(t.th,{children:"Description"})]})}),(0,u.jsxs)(t.tbody,{children:[(0,u.jsxs)(t.tr,{children:[(0,u.jsx)(t.td,{children:"1"}),(0,u.jsx)(t.td,{children:(0,u.jsx)(t.code,{children:"car"})}),(0,u.jsx)(t.td,{children:"The CAR file to be uploaded."})]}),(0,u.jsxs)(t.tr,{children:[(0,u.jsx)(t.td,{children:"2"}),(0,u.jsx)(t.td,{children:(0,u.jsx)(t.code,{children:"{options}"})}),(0,u.jsxs)(t.td,{children:[(0,u.jsx)(t.em,{children:"Optional."})," An object whose properties define certain Web3.Storage options and metadata about the files being uploaded. See below for more details."]})]})]})]}),"\n",(0,u.jsxs)(t.p,{children:["An ",(0,u.jsx)(t.code,{children:"{options}"})," object has the following properties that can be used as parameters when calling ",(0,u.jsx)(t.code,{children:"putCar()"}),":"]}),"\n",(0,u.jsxs)(d.Z,{heading:"name",children:[(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"String."})," The ",(0,u.jsx)(t.code,{children:"name"})," parameter lets you attach an arbitrary name to the uploaded content archive, which you can use to identify and organize your uploads. The name is not stored alongside the data on IPFS, but it is viewable within the file listing on the Web3.Storage site."]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-js",children:"const cid = await client.putCar(files, { name: 'cat pics' });\n"})})]}),"\n",(0,u.jsxs)(d.Z,{heading:"maxRetries",children:[(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"Number."})," You can specify how many times ",(0,u.jsx)(t.code,{children:"putCar"})," should attempt to retry in case of failure by passing in a ",(0,u.jsx)(t.code,{children:"maxRetries"})," option. The default value is ",(0,u.jsx)(t.code,{children:"5"}),"."]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-js",children:"const cid = await client.putCar(files, { maxRetries: 3 });\n"})})]}),"\n",(0,u.jsxs)(d.Z,{heading:"onStoredChunk",children:[(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.em,{children:"Function."})," You can also display progress updates by passing in an ",(0,u.jsx)(t.code,{children:"onStoredChunk"})," callback. This is called after each chunk of data is uploaded, with the size of the chunk in bytes passed in as a parameter. By default, data is split into chunks of around 10MB."]}),(0,u.jsx)(t.pre,{children:(0,u.jsx)(t.code,{className:"language-js",children:"const onStoredChunk = chunkSize => console.log(`stored chunk of ${chunkSize} bytes`);\nconst cid = await client.putCar(car, { onStoredChunk });\n"})})]}),"\n",(0,u.jsxs)(d.Z,{heading:"decoders",children:[(0,u.jsxs)(t.p,{children:[(0,u.jsx)(t.a,{href:"https://github.com/multiformats/js-multiformats#ipld-codecs-multicodec",children:(0,u.jsx)(t.em,{children:"BlockDecoder"})}),". Used to specify additional IPLD block decoders which interpret the data in the CAR file  and split it into multiple chunks. Note these are only required if the CAR file was not encoded using the default encoders: ",(0,u.jsx)(t.code,{children:"dag-pb"}),", ",(0,u.jsx)(t.code,{children:"dag-cbor"})," and ",(0,u.jsx)(t.code,{children:"raw"}),"."]}),(0,u.jsx)(l.Z,{src:h,lang:"js"})]})]})}}var x=(0,u.jsx)(f,{});function g(e){return(0,s.withSSG)((0,i.Z)({filename:"js-client-library.md",route:"/docs/reference/js-client-library",meta:{title:"JavaScript client library reference",description:"Integrate Web3.Storage into your code using the JavaScript client library."},pageMap:[{name:"docs",children:[{name:"community",children:[{name:"help-and-support",route:"/docs/community/help-and-support",frontMatter:{title:"Help & support",description:"Get help using or building with the Web3.Storage service."}}],route:"/docs/community"},{name:"concepts",children:[{name:"content-addressing",route:"/docs/concepts/content-addressing",frontMatter:{title:"Content addressing",description:"A conceptual overview of content-based addressing for storing and locating files on a decentralized network with Web3.storage."}},{name:"decentralized-storage",route:"/docs/concepts/decentralized-storage",frontMatter:{title:"Decentralized storage",description:"Learn about decentralized storage works and how it's key to Web3.Storage."}},{name:"storage-economics",route:"/docs/concepts/storage-economics",frontMatter:{title:"Web3.Storage economics",description:"Learn how Web3.Storage can offer decentralized storage at no cost by leveraging the unique economics of the Filecoin network."}}],route:"/docs/concepts"},{name:"examples",children:[{name:"getting-started",route:"/docs/examples/getting-started",frontMatter:{title:"Getting started",description:"Learn Web3.Storage by example with sample applications and starter projects."}},{name:"image-gallery",route:"/docs/examples/image-gallery",frontMatter:{title:"Image gallery example",description:"Learn about Web3.Storage by walking through the code for a simple image gallery app that runs entirely in the browser."}}],route:"/docs/examples"},{name:"how-tos",children:[{name:"generate-api-token",route:"/docs/how-tos/generate-api-token",frontMatter:{title:"How to generate an API token",description:"Learn how to get an API token for using Web3.Storage programmatically in this quick how-to guide."}},{name:"get-status",route:"/docs/how-tos/get-status",frontMatter:{title:"Getting upload status"}},{name:"list-directory-contents",route:"/docs/how-tos/list-directory-contents",frontMatter:{title:"Listing the contents of an IPFS directory",description:"Learn how to list the contents of an IPFS directory without having to fetch the whole thing."}},{name:"list",route:"/docs/how-tos/list",frontMatter:{title:"How to list files uploaded to Web3.Storage",description:"Learn how to list the files you've uploaded to Web3.Storage in this quick how-to guide."}},{name:"pinning-services-api",route:"/docs/how-tos/pinning-services-api",frontMatter:{title:"Pinning Services API",description:"Learn how to pin a file to IPFS using the Pinning Services API"}},{name:"query",route:"/docs/how-tos/query",frontMatter:{title:"How to query Web3.Storage",description:"Learn how to query Web3.Storage in this quick how-to guide."}},{name:"retrieve",route:"/docs/how-tos/retrieve",frontMatter:{title:"How to retrieve data from Web3.Storage",description:"Learn how to retrieve data stored using Web3.Storage in this quick how-to guide."}},{name:"store",route:"/docs/how-tos/store",frontMatter:{title:"How to store data using Web3.Storage",description:"Learn how to store your data on the decentralized web with Web3.Storage."}},{name:"troubleshooting",route:"/docs/how-tos/troubleshooting",frontMatter:{title:"Troubleshooting",description:"A collection of common issues for new developers, and solutions to those problems."}},{name:"work-with-car-files",route:"/docs/how-tos/work-with-car-files",frontMatter:{title:"Working with Content Archives",description:"Learn how to work with Content Archives of IPLD data."}}],route:"/docs/how-tos"},{name:"intro",route:"/docs/intro",frontMatter:{title:"Welcome",description:"Learn how to use Web3.Storage to decentralize your data storage without all the complicated details."}},{name:"reference",children:[{name:"go-client-library",route:"/docs/reference/go-client-library",frontMatter:{title:"Go client library reference",description:"Integrate Web3.Storage into your code using the Go client library."}},{name:"http-api-manual",route:"/docs/reference/http-api-manual",frontMatter:{title:"Web3.Storage API (1.0)"}},{name:"http-api",route:"/docs/reference/http-api",frontMatter:{title:"Web3.Storage API (1.0)"}},{name:"js-client-library",route:"/docs/reference/js-client-library",frontMatter:{title:"JavaScript client library reference",description:"Integrate Web3.Storage into your code using the JavaScript client library."}},{name:"js-utilities",route:"/docs/reference/js-utilities",frontMatter:{title:"JavaScript utility libraries",description:"Learn about some helpful utility libraries that make working with Web3.Storage easier."}}],route:"/docs/reference"}],route:"/docs"}]},null))(j(j({},e),{},{children:x}))}},3953:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/reference/js-client-library",function(){return n(72)}])}},function(e){e.O(0,[273,306,469,774,888,179],(function(){return t=3953,e(e.s=t);var t}));var t=e.O();_N_E=t}]);